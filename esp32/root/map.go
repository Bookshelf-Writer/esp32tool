package root

/* This file is automatically generated */

import (
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32c2"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32c3"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32c6"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32h2"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32p4"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32s2"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/branch/esp32s3"
	"github.com/Bookshelf-Writer/esp32tool/esp32/root/patterns"
	"github.com/Bookshelf-Writer/esp32tool/lib/output"
	"github.com/Bookshelf-Writer/esp32tool/lib/serial"
)

var MagicMap map[uint32]func(*serial.SerialObj, *output.LogObj) (patterns.EspInterface, error)

func init() {
	MagicMap = make(map[uint32]func(*serial.SerialObj, *output.LogObj) (patterns.EspInterface, error))

	for _, key := range esp32.MagicValues {
		MagicMap[key] = esp32.Init
	}
	for _, key := range esp32c2.MagicValues {
		MagicMap[key] = esp32c2.Init
	}
	for _, key := range esp32c3.MagicValues {
		MagicMap[key] = esp32c3.Init
	}
	for _, key := range esp32c6.MagicValues {
		MagicMap[key] = esp32c6.Init
	}
	for _, key := range esp32h2.MagicValues {
		MagicMap[key] = esp32h2.Init
	}
	for _, key := range esp32p4.MagicValues {
		MagicMap[key] = esp32p4.Init
	}
	for _, key := range esp32s2.MagicValues {
		MagicMap[key] = esp32s2.Init
	}
	for _, key := range esp32s3.MagicValues {
		MagicMap[key] = esp32s3.Init
	}
}
