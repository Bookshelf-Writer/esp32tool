package code

/* This file is automatically generated */

type SizeType byte

const (
	SizeUndef SizeType = iota
	Size256Kb
	Size512Kb
	Size1Mb
	Size2Mb
	Size4Mb
	Size8Mb
	Size16Mb
	Size32Mb
	Size64Mb
	Size128Mb
	Size256Mb
)

func SizeDetect(b byte) SizeType {
	switch b {
	case 0x12, 0x32:
		return Size256Kb
	case 0x13, 0x33:
		return Size512Kb
	case 0x14, 0x34:
		return Size1Mb
	case 0x15, 0x35:
		return Size2Mb
	case 0x16, 0x36:
		return Size4Mb
	case 0x17, 0x37:
		return Size8Mb
	case 0x18, 0x38:
		return Size16Mb
	case 0x19, 0x39:
		return Size32Mb
	case 0x20, 0x1A, 0x3A:
		return Size64Mb
	case 0x21, 0x1B:
		return Size128Mb
	case 0x22, 0x1C:
		return Size256Mb
	}
	return SizeUndef
}

////

const (
	Byte     = 1
	Kilobyte = 1024 * Byte
	Megabyte = 1024 * Kilobyte
)

type SizeMapObj struct {
	String string
	Size   int
}

var SizeMap = map[SizeType]SizeMapObj{
	Size256Kb: {"256kB", Kilobyte * 256},
	Size512Kb: {"512kB", Kilobyte * 512},
	Size1Mb:   {"1Mb", Megabyte},
	Size2Mb:   {"2Mb", Megabyte * 2},
	Size4Mb:   {"4Mb", Megabyte * 4},
	Size8Mb:   {"8Mb", Megabyte * 8},
	Size16Mb:  {"16Mb", Megabyte * 16},
	Size32Mb:  {"32Mb", Megabyte * 32},
	Size64Mb:  {"64Mb", Megabyte * 64},
	Size128Mb: {"128Mb", Megabyte * 128},
	Size256Mb: {"256Mb", Megabyte * 256},
}

func (t SizeType) String() string {
	str, ok := SizeMap[t]
	if ok {
		return str.String
	}
	return "unknown"
}

func (t SizeType) Size() int {
	num, ok := SizeMap[t]
	if ok {
		return num.Size
	}
	return 0
}
