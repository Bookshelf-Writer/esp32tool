package code

/* This file is automatically generated */

type SizeType byte

const (
	SizeUndef SizeType = iota
	Size256Kb
	Size512Kb
	Size1Mb
	Size2Mb
	Size4Mb
	Size8Mb
	Size16Mb
	Size32Mb
	Size64Mb
	Size128Mb
	Size256Mb
)

func SizeDetect(b byte) SizeType {
	switch b {
	case 0x12, 0x32:
		return Size256Kb
	case 0x13, 0x33:
		return Size512Kb
	case 0x14, 0x34:
		return Size1Mb
	case 0x15, 0x35:
		return Size2Mb
	case 0x16, 0x36:
		return Size4Mb
	case 0x17, 0x37:
		return Size8Mb
	case 0x18, 0x38:
		return Size16Mb
	case 0x19, 0x39:
		return Size32Mb
	case 0x20, 0x1A, 0x3A:
		return Size64Mb
	case 0x21, 0x1B:
		return Size128Mb
	case 0x22, 0x1C:
		return Size256Mb
	}
	return SizeUndef
}

func (t SizeType) String() string {
	switch t {
	case Size256Kb:
		return "256kB"
	case Size512Kb:
		return "512kB"
	case Size1Mb:
		return "1Mb"
	case Size2Mb:
		return "2Mb"
	case Size4Mb:
		return "4Mb"
	case Size8Mb:
		return "8Mb"
	case Size16Mb:
		return "16Mb"
	case Size32Mb:
		return "32Mb"
	case Size64Mb:
		return "64Mb"
	case Size128Mb:
		return "128Mb"
	case Size256Mb:
		return "256Mb"
	}
	return "unknown"
}

////

const (
	Byte     = 1
	Kilobyte = 1024 * Byte
	Megabyte = 1024 * Kilobyte
)

func (t SizeType) Size() int {
	switch t {
	case Size256Kb:
		return Kilobyte * 256
	case Size512Kb:
		return Kilobyte * 512
	case Size1Mb:
		return Megabyte
	case Size2Mb:
		return Megabyte * 2
	case Size4Mb:
		return Megabyte * 4
	case Size8Mb:
		return Megabyte * 8
	case Size16Mb:
		return Megabyte * 16
	case Size32Mb:
		return Megabyte * 32
	case Size64Mb:
		return Megabyte * 64
	case Size128Mb:
		return Megabyte * 128
	case Size256Mb:
		return Megabyte * 256
	}
	return 0
}
